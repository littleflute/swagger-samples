/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.Id;
import io.swagger.model.InlineResponse200;
import io.swagger.model.InlineResponse201;
import io.swagger.model.LoginInfo;
import io.swagger.model.UserInfo;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-05-08T16:44:27.195Z[GMT]")
@Validated
public interface UserApi {

    @Operation(summary = "Log in a User.", description = "Authenticate a specific User with their email address and password. ", tags={ "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "400", description = "The request body was either not present or did not contain all of the required fields. ", content = @Content(schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "401", description = "The specified credentials were invalid. ", content = @Content(schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "An internal server error occurred. ", content = @Content(schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/user/login",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse200> authenticateUser(@Parameter(in = ParameterIn.DEFAULT, description = "Email address and plain-text password for the User being authenticated.", required=true, schema=@Schema()) @Valid @RequestBody LoginInfo body);


    @Operation(summary = "Fetch data about a specific User.", description = "Returns information about the specified User. Include username and church jointed. ", tags={ "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(schema = @Schema(implementation = UserInfo.class))),
        
        @ApiResponse(responseCode = "403", description = "The request was not made by an authenticated User satisfying the authorization criteria described above. ", content = @Content(schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Specified Course `id` not found.", content = @Content(schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/user/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserInfo> getUserById(@Parameter(in = ParameterIn.PATH, description = "Unique ID of a User.  Exact type/format will depend on your implementation but will likely be either an integer or a string. ", required=true, schema=@Schema()) @PathVariable("id") Id id);


    @Operation(summary = "", description = "register a new user", tags={ "User" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "New User successfully added", content = @Content(schema = @Schema(implementation = InlineResponse201.class))),
        
        @ApiResponse(responseCode = "400", description = "The request body was either not present or did not contain a valid User object. ", content = @Content(schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "403", description = "The request was not made by an authenticated User satisfying the authorization criteria described above. ", content = @Content(schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse201> newUser(@Parameter(in = ParameterIn.DEFAULT, description = "user email and password.", required=true, schema=@Schema()) @Valid @RequestBody LoginInfo body);

}

